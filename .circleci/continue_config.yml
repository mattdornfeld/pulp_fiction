version: 2.1

parameters:
  should_build_bazel_ci_image:
    type: boolean
    default: false

  should_apply_terraform_changes:
    type: boolean
    default: false

  should_build_and_test_backend_service:
    type: boolean
    default: false

commands:
  configure_docker:
    description: "Setup a remote Docker host and login to the Docker registry"
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - run: echo $(aws ecr get-login-password --region us-east-1) | docker login --username AWS --password-stdin 146956608205.dkr.ecr.us-east-1.amazonaws.com

jobs:
  build_bazel_ci_image:
    working_directory: /app
    docker:
      - image: 146956608205.dkr.ecr.us-east-1.amazonaws.com/pulp_fiction/bazel_ci
        aws_auth:
          aws_access_key_id: $AWS_ACCESS_KEY_ID
          aws_secret_access_key: $AWS_SECRET_ACCESS_KEY
    steps:
      - checkout
      - configure_docker
      - run:
          name: Build and Push Docker Image
          command: |
            bazel run \
            --define=DOCKER_IMAGE_TAG=latest \
            --action_env=DOCKER_CERT_PATH=${DOCKER_CERT_PATH} \
            --action_env=DOCKER_HOST=${DOCKER_HOST} \
            --action_env=DOCKER_MACHINE_NAME=${DOCKER_MACHINE_NAME} \
            --action_env=DOCKER_TLS_VERIFY=${DOCKER_TLS_VERIFY} \
            --action_env=NO_PROXY=${NO_PROXY} \
            //docker_images/bazel_ci:push_image

  test_and_plan_terraform_changes:
    working_directory: /app
    docker:
      - image: 146956608205.dkr.ecr.us-east-1.amazonaws.com/pulp_fiction/bazel_ci
        aws_auth:
          aws_access_key_id: $AWS_ACCESS_KEY_ID
          aws_secret_access_key: $AWS_SECRET_ACCESS_KEY
    steps:
      - checkout
      - run:
          name: Test and Plan Terraform Changes
          command: |
            bazel run //terraform:root_module init
            bazel test //terraform:all
            bazel run //terraform:root_module plan

  apply_terraform_changes:
    working_directory: /app
    docker:
      - image: 146956608205.dkr.ecr.us-east-1.amazonaws.com/pulp_fiction/bazel_ci
        aws_auth:
          aws_access_key_id: $AWS_ACCESS_KEY_ID
          aws_secret_access_key: $AWS_SECRET_ACCESS_KEY
    steps:
      - checkout
      - run:
          name: Apply Terraform Changes
          command: |
            bazel run //terraform:root_module init
            bazel run //terraform:root_module apply -- -auto-approve

  build_and_test_backend_service:
    working_directory: /app
    docker:
      - image: 146956608205.dkr.ecr.us-east-1.amazonaws.com/pulp_fiction/bazel_ci
        aws_auth:
          aws_access_key_id: $AWS_ACCESS_KEY_ID
          aws_secret_access_key: $AWS_SECRET_ACCESS_KEY
    steps:
      - checkout
      - configure_docker
#      - run:
#          name: Run Tests
#          command: |
#            bazel test \
#            --define=DOCKER_IMAGE_TAG=latest \
#            --action_env=DOCKER_CERT_PATH=${DOCKER_CERT_PATH} \
#            --action_env=DOCKER_HOST=${DOCKER_HOST} \
#            --action_env=DOCKER_MACHINE_NAME=${DOCKER_MACHINE_NAME} \
#            --action_env=DOCKER_TLS_VERIFY=${DOCKER_TLS_VERIFY} \
#            --action_env=NO_PROXY=${NO_PROXY} \
#            //pulp_fiction_backend_service/...
      - run:
          name: Build and Push Docker Image
          command: |
            bazel run \
            --define=DOCKER_IMAGE_TAG=latest \
            --action_env=DOCKER_CERT_PATH=${DOCKER_CERT_PATH} \
            --action_env=DOCKER_HOST=${DOCKER_HOST} \
            --action_env=DOCKER_MACHINE_NAME=${DOCKER_MACHINE_NAME} \
            --action_env=DOCKER_TLS_VERIFY=${DOCKER_TLS_VERIFY} \
            --action_env=NO_PROXY=${NO_PROXY} \
            //docker_images/pulp_fiction_backend_service:push_image

workflows:
  build_bazel_ci_image:
    when: << pipeline.parameters.should_build_bazel_ci_image >>
    jobs:
      - build_bazel_ci_image

  test_and_plan_terraform_changes:
    when: << pipeline.parameters.should_apply_terraform_changes >>
    jobs:
      - test_and_plan_terraform_changes:
          filters:
            branches:
              ignore:
                - master

  apply_terraform_changes:
    when: << pipeline.parameters.should_apply_terraform_changes >>
    jobs:
      - apply_terraform_changes:
          filters:
            branches:
              only:
                - master

  build_and_test_backend_service:
    when: << pipeline.parameters.should_build_and_test_backend_service >>
    jobs:
      - build_and_test_backend_service
