version: 2.1

parameters:
  should_build_bazel_ci_image:
    type: boolean
    default: false

  should_apply_terraform_changes:
    type: boolean
    default: false

  should_build_and_test_backend_service:
    type: boolean
    default: false

  should_build_and_test_ios_app:
    type: boolean
    default: false

commands:
  login_to_ecr:
    description: "Login to the ECR Docker registry"
    steps:
      - run:
          name: "Login to ECR"
          command: |
            echo $(aws ecr get-login-password --region us-east-1) | \
            docker login \
            --username AWS \
            --password-stdin \
            146956608205.dkr.ecr.us-east-1.amazonaws.com

  configure_docker:
    description: "Setup a remote Docker host and login to the Docker registry"
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - login_to_ecr

  get_docker_image_tag:
    description: "Gets the string based on branch name which will be used to tag a built Docker image"
    steps:
      - run:
          name: "Get Docker Image Tag"
          command: |
            echo 'export DOCKER_IMAGE_TAG=$(if [ ${CIRCLE_BRANCH} == "master" ]; then echo "latest"; else echo ${CIRCLE_BRANCH//\//-}; fi)' >> $BASH_ENV
            source $BASH_ENV
            echo "Setting DOCKER_IMAGE_TAG=${DOCKER_IMAGE_TAG}"

  build_and_push_image:
    description: "Build and Push Docker Image"
    parameters:
      docker_image_name:
        type: string
    steps:
      - get_docker_image_tag
      - run:
          name: "Build and Push Docker Image"
          command: |
            DOCKER_IMAGE_NAME=<< parameters.docker_image_name >>
            bazel run \
            --define=DOCKER_IMAGE_TAG=${DOCKER_IMAGE_TAG} \
            --action_env=DOCKER_CERT_PATH=${DOCKER_CERT_PATH} \
            --action_env=DOCKER_HOST=${DOCKER_HOST} \
            --action_env=DOCKER_MACHINE_NAME=${DOCKER_MACHINE_NAME} \
            --action_env=DOCKER_TLS_VERIFY=${DOCKER_TLS_VERIFY} \
            --action_env=NO_PROXY=${NO_PROXY} \
            //docker_images/${DOCKER_IMAGE_NAME}:push_image

  run_command_in_docker:
    description: "Run the specified command in a Docker container"
    parameters:
      command_name:
        type: string
      command:
        type: string
    steps:
      - get_docker_image_tag
      - run:
          name: << parameters.command_name >>
          command: |
            docker run \
            --env AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID} \
            --env AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY} \
            --env DOCKER_IMAGE_TAG=${DOCKER_IMAGE_TAG} \
            --volume $PWD:/app \
            --volume /var/run/docker.sock:/var/run/docker.sock \
            --workdir /app \
            146956608205.dkr.ecr.us-east-1.amazonaws.com/pulp_fiction/bazel_ci \
            bash -c << parameters.command >>

jobs:
  build_bazel_ci_image:
    working_directory: /app
    docker:
      - image: 146956608205.dkr.ecr.us-east-1.amazonaws.com/pulp_fiction/bazel_ci
        aws_auth:
          aws_access_key_id: $AWS_ACCESS_KEY_ID
          aws_secret_access_key: $AWS_SECRET_ACCESS_KEY
    steps:
      - checkout
      - configure_docker
      - build_and_push_image:
          docker_image_name: bazel_ci

  test_and_plan_terraform_changes:
    working_directory: /app
    docker:
      - image: 146956608205.dkr.ecr.us-east-1.amazonaws.com/pulp_fiction/bazel_ci
        aws_auth:
          aws_access_key_id: $AWS_ACCESS_KEY_ID
          aws_secret_access_key: $AWS_SECRET_ACCESS_KEY
    steps:
      - checkout
      - run:
          name: Test and Plan Terraform Changes
          command: |
            bazel run //terraform:root_module init
            bazel test //terraform:all
            bazel run //terraform:root_module plan

  apply_terraform_changes:
    working_directory: /app
    docker:
      - image: 146956608205.dkr.ecr.us-east-1.amazonaws.com/pulp_fiction/bazel_ci
        aws_auth:
          aws_access_key_id: $AWS_ACCESS_KEY_ID
          aws_secret_access_key: $AWS_SECRET_ACCESS_KEY
    steps:
      - checkout
      - run:
          name: Apply Terraform Changes
          command: |
            bazel run //terraform:root_module init
            bazel run //terraform:root_module apply -- -auto-approve

  build_and_test_backend_service:
    working_directory: /home/circleci/app
    machine:
      image: ubuntu-2004:202010-01
    steps:
      - checkout
      - login_to_ecr
      - run_command_in_docker:
          command_name: Run Tests and Build Image
          command: |
            "bazel run //docker_images:login_to_ecr && \
             bazel test //pulp_fiction_backend_service/... && \
             bazel run --define=DOCKER_IMAGE_TAG=${DOCKER_IMAGE_TAG} //docker_images/pulp_fiction_backend_service:push_image"

  build_and_deploy_backend_service:
    working_directory: /home/circleci/app
    machine:
      image: ubuntu-2004:202010-01
    steps:
      - checkout
      - login_to_ecr
      - run_command_in_docker:
          command_name: Build Image
          command: |
            "bazel run //docker_images:login_to_ecr && \
             bazel run --define=DOCKER_IMAGE_TAG=${DOCKER_IMAGE_TAG} //docker_images/pulp_fiction_backend_service:push_image"
      - run_command_in_docker:
          command_name: Update ECS Service
          command: |
              "bazel run //pulp_fiction_backend_service:update_ecs_pulp_fiction_backend_service"

  build_and_test_ios_app:
    macos:
      xcode: 13.3.1
    steps:
      - checkout
      - run:
          name: Build and Test iOS App
          command: |
            ./sbin/add_bazelisk_to_bin
            bazel test //pulp_fiction_ios_app/... --apple_platform_type=ios --test_output=all

workflows:
  build_bazel_ci_image:
    when: << pipeline.parameters.should_build_bazel_ci_image >>
    jobs:
      - build_bazel_ci_image

  test_and_plan_terraform_changes:
    when: << pipeline.parameters.should_apply_terraform_changes >>
    jobs:
      - test_and_plan_terraform_changes:
          filters:
            branches:
              ignore:
                - master

  apply_terraform_changes:
    when: << pipeline.parameters.should_apply_terraform_changes >>
    jobs:
      - apply_terraform_changes:
          filters:
            branches:
              only:
                - master

  build_and_test_backend_service:
    when: << pipeline.parameters.should_build_and_test_backend_service >>
    jobs:
      - build_and_test_backend_service:
          filters:
            branches:
              ignore:
                - master

  build_and_deploy_backend_service:
    when: << pipeline.parameters.should_build_and_test_backend_service >>
    jobs:
      - build_and_deploy_backend_service:
          filters:
            branches:
              only:
                - master

  build_and_test_ios_app:
    when: << pipeline.parameters.should_build_and_test_ios_app >>
    jobs:
      - build_and_test_ios_app:
          filters:
            branches:
              ignore:
                - master
